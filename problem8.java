/*
 * Project Euler: Problem 8
 * 
 * Largest product in a series:
 * 
 * Find the thirteen adjacent digits in the 1000-digit number that have the
 * greatest product. What is the value of this product?
 * 
 * Author: Rex Cummings
 * 
 * Date: 01/24/16
 */
public class problem8
{
	public static void main(String[] args)
	{
		System.out.println(new problem8().run());
	}

	public long run()
	{
		long largestProduct = -1;

		String input = "73167176531330624919225119674426574742355349194934969835203127745063262395783180169848018694788518438586156078911294949545"
				+ "9501737958331952853208805511125406987471585238630507156932909632952274430435576689664895044524452316173185640309871112172238311"
				+ "3622298934233803081353362766142828064444866452387493035890729629049156044077239071381051585930796086670172427121883998797908792"
				+ "2749219016997208880937766572733300105336788122023542180975125454059475224352584907711670556013604839586446706324415722155397536"
				+ "9781797784617406495514929086256932197846862248283972241375657056057490261407972968652414535100474821663704844031998900088952434"
				+ "5065854122758866688116427171479924442928230863465674813919123162824586178664583591245665294765456828489128831426076900422421902"
				+ "2671055626321111109370544217506941658960408071984038509624554443629812309878799272442849091888458015616609791913387549920052406"
				+ "36899125607176060588611646710940507754100225698315520005593572972571636269561882670428252483600823257530420752963450";

		for (int i = 0; i + 13 < input.length(); i++)
		{
			long product = 1;
			String section = "";

			section = input.substring(i, i + 13);

			for (int j = 0; j < 13; j++)
				product *= section.charAt(j) - '0';
			if (product > largestProduct)
				largestProduct = product;
		}

		return largestProduct;
	}
}
